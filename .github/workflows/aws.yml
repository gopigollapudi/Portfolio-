name: üöÄ Deploy Portfolio to Amazon ECS

on:
  push:
    branches:
      - main
      - master

permissions:
  contents: read
  id-token: write

env:
  AWS_REGION: ap-south-1                      # Your AWS region
  ECR_REPOSITORY: gopi-portfolio              # Your ECR repository name
  ECS_CLUSTER: gopi-portfolio-cluster         # Your ECS cluster name
  ECS_SERVICE: gopi-portfolio-service         # Your ECS service name
  ECS_TASK_DEFINITION: .aws/task-definition.json  # Path to ECS task definition JSON
  CONTAINER_NAME: gopi-portfolio-container    # Container name inside task definition

jobs:
  deploy:
    name: Deploy to Amazon ECS
    runs-on: ubuntu-latest
    environment: production

    steps:
      # üß≠ Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # ‚öôÔ∏è Step 2: Configure AWS credentials (using Secrets from GitHub)
     - name: Configure AWS credentials
  uses: aws-actions/configure-aws-credentials@v3
  with:
    aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
    aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    aws-region: ${{ env.AWS_REGION }}

      # üîê Step 3: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # üê≥ Step 4: Build and push Docker image to ECR
      - name: Build, tag, and push Docker image
        id: build-image
        env:
        - name: Configure AWS credentials via OIDC
  uses: aws-actions/configure-aws-credentials@v3
  with:
    role-to-assume: arn:aws:iam::<YOUR_AWS_ACCOUNT_ID>:role/<YOUR_GITHUB_ROLE_NAME>
    aws-region: ap-south-1

          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          echo "üöß Building Docker image..."
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          echo "üì¶ Pushing image to ECR..."
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # üß© Step 5: Render ECS task definition with new image
      - name: Render ECS task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      # üöÄ Step 6: Deploy updated task definition to ECS
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
